# monitoring_bot.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π ML-–º–æ–¥–µ–ª–∏.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP/SL.
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

import json
import time
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timezone
import glob

# --- –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
from utils.logger import monitoring_logger as logger

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from features.indicators import add_classic_indicators, add_advanced_indicators # –î–ª—è TP/SL
from features.feature_engineering import prepare_data_for_prediction

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
BOT_STATE_FILE = 'bot_state.json'
active_trades = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏

def load_bot_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞."""
    global active_trades
    if os.path.exists(BOT_STATE_FILE):
        try:
            with open(BOT_STATE_FILE, 'r') as f:
                active_trades = json.load(f)
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(active_trades)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
            active_trades = {}
    else:
        logger.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        active_trades = {}

def save_bot_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Ñ–∞–π–ª."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã
        serializable_state = {}
        for symbol, trade_info in active_trades.items():
            safe_trade_info = trade_info.copy()
            serializable_state[symbol] = safe_trade_info
            
        with open(BOT_STATE_FILE, 'w') as f:
            json.dump(serializable_state, f, indent=4, default=str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
def load_latest_model(model_dir="models/ensemble"):
    """
    –ò—â–µ—Ç –≤ –ø–∞–ø–∫–µ 'models' —Ñ–∞–π–ª—ã trade_model_*.pkl
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å + —Å–ø–∏—Å–æ–∫ —Ñ–∏—á –∏–∑ —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ.
    """
    import joblib
    pattern = "ensemble_model_*.pkl"
    files = glob.glob(os.path.join(model_dir, pattern))
    if not files:
        raise FileNotFoundError(f"–í –ø–∞–ø–∫–µ '{model_dir}' –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ '{pattern}'")
    latest = max(files, key=os.path.getmtime)
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏: {latest}")
    mdl = joblib.load(latest)
    return mdl["model"], mdl["features"]

# --- –†–∞—Å—á–µ—Ç TP/SL ---
def calculate_dynamic_tp_sl(df_recent, side, sl_coef=2.0, tp_window=10):
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å TP1, TP2, TP3 –∏ SL –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    TP1, TP2, TP3 –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –≤ –æ–∫–Ω–µ tp_window.
    df_recent: DataFrame —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –≤–∫–ª—é—á–∞—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã.
    side: 'LONG' –∏–ª–∏ 'SHORT'.
    sl_coef: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SL (—É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ ATR).
    tp_window: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ TP.
    """
    if df_recent.empty:
        return None, None, None, None
        
    last_index = df_recent.index[-1]
    current_price = df_recent.at[last_index, 'close']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ TP/SL (–ø–æ—Å–ª–µ–¥–Ω–∏–µ tp_window —Å–≤–µ—á–µ–π, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é)
    analysis_window = df_recent.tail(tp_window)
    
    # --- –†–∞—Å—á–µ—Ç Stop Loss ---
    if side == 'LONG':
        # SL: –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞ –ë–æ–ª–ª–∏–Ω–∂–µ—Ä–∞)
        sl_level = analysis_window['low'].min()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        if 'ATR' in df_recent.columns and not pd.isna(df_recent.at[last_index, 'ATR']):
            sl_level_atr = current_price - (df_recent.at[last_index, 'ATR'] * sl_coef)
            # –ë–µ—Ä–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π (–º–µ–Ω—å—à–∏–π) —É—Ä–æ–≤–µ–Ω—å –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–∏–Ω–∏–º—É–º–æ–º –∏ ATR
            sl_level = min(sl_level, sl_level_atr)
        else:
            # –ï—Å–ª–∏ ATR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            sl_level = current_price * 0.99 # –ù–∞–ø—Ä–∏–º–µ—Ä, 1% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            
    elif side == 'SHORT':
        # SL: –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å–≤–µ—á–µ–π –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        sl_level = analysis_window['high'].max()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ATR –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        if 'ATR' in df_recent.columns and not pd.isna(df_recent.at[last_index, 'ATR']):
            sl_level_atr = current_price + (df_recent.at[last_index, 'ATR'] * sl_coef)
            # –ë–µ—Ä–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π (–±–æ–ª—å—à–∏–π) —É—Ä–æ–≤–µ–Ω—å –º–µ–∂–¥—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –º–∞–∫—Å–∏–º—É–º–æ–º –∏ ATR
            sl_level = max(sl_level, sl_level_atr)
        else:
            # –ï—Å–ª–∏ ATR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
            sl_level = current_price * 1.01 # –ù–∞–ø—Ä–∏–º–µ—Ä, 1% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    else:
        return None, None, None, None

    # --- –†–∞—Å—á–µ—Ç Take Profit ---
    if side == 'LONG':
        # TP1: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ High –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞
        tp1_level = analysis_window['high'].mean()
        # TP2: 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å High –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞
        tp2_level = analysis_window['high'].quantile(0.75)
        # TP3: –ú–∞–∫—Å–∏–º—É–º High –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç)
        tp3_level = analysis_window['high'].max()
        
    elif side == 'SHORT':
        # TP1: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Low –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞
        tp1_level = analysis_window['low'].mean()
        # TP2: 25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å Low –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞
        tp2_level = analysis_window['low'].quantile(0.25)
        # TP3: –ú–∏–Ω–∏–º—É–º Low –≤ –æ–∫–Ω–µ –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ)
        tp3_level = analysis_window['low'].min()
    else:
        return None, None, None, None

    # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
    if side == 'LONG':
        sl_level = min(sl_level, current_price * 0.995)
        tp1_level = max(tp1_level, current_price * 1.001)
        tp2_level = max(tp2_level, tp1_level * 1.001)
        tp3_level = max(tp3_level, tp2_level * 1.001)
        
    else: # SHORT
        sl_level = max(sl_level, current_price * 1.005)
        tp1_level = min(tp1_level, current_price * 0.999)
        tp2_level = min(tp2_level, tp1_level * 0.999)
        tp3_level = min(tp3_level, tp2_level * 0.999)
        
    return (
        round(tp1_level, 8), 
        round(tp2_level, 8), 
        round(tp3_level, 8), 
        round(sl_level, 8)
    )

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
def check_active_trades(exchange, timeframe):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ª–∏ TP/SL –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
    """
    global active_trades
    if not active_trades:
        return

    logger.info(f"-> –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(active_trades)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")
    trades_to_remove = []
    for symbol, trade_info in list(active_trades.items()):
        try:
            side = trade_info['side']
            entry_price = trade_info['entry_price']
            tp1 = trade_info['tp1']
            tp2 = trade_info['tp2']
            tp3 = trade_info['tp3']
            sl = trade_info['sl']
            entry_time = trade_info.get('entry_time', 'N/A')

            ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=1)
            if not ohlcv:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–¥–µ–ª–∫–∏.")
                continue
            current_candle = ohlcv[-1]
            current_high = current_candle[2] # high
            current_low = current_candle[3] # low

            event_logged = False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π ---
            if side == 'LONG':
                if current_high >= tp3:
                    logger.info(f"üéâ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP3 ({tp3:.8f})! –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Ö–æ–¥: {entry_price:.8f}")
                    trades_to_remove.append(symbol)
                    event_logged = True
                elif current_low <= sl:
                    logger.info(f"üíî [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ SL ({sl:.8f})! –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Ö–æ–¥: {entry_price:.8f}")
                    trades_to_remove.append(symbol)
                    event_logged = True
                if not event_logged and current_high >= tp2:
                    if not trade_info.get('tp2_hit', False):
                         logger.info(f"‚úÖ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP2 ({tp2:.8f}). –í—Ö–æ–¥: {entry_price:.8f}")
                         active_trades[symbol]['tp2_hit'] = True
                         event_logged = True
                if not event_logged and current_high >= tp1:
                    if not trade_info.get('tp1_hit', False) and not trade_info.get('tp2_hit', False):
                         logger.info(f"‚úÖ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP1 ({tp1:.8f}). –í—Ö–æ–¥: {entry_price:.8f}")
                         active_trades[symbol]['tp1_hit'] = True

            elif side == 'SHORT':
                if current_low <= tp3:
                    logger.info(f"üéâ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP3 ({tp3:.8f})! –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Ö–æ–¥: {entry_price:.8f}")
                    trades_to_remove.append(symbol)
                    event_logged = True
                elif current_high >= sl:
                    logger.info(f"üíî [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ SL ({sl:.8f})! –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Ö–æ–¥: {entry_price:.8f}")
                    trades_to_remove.append(symbol)
                    event_logged = True
                if not event_logged and current_low <= tp2:
                    if not trade_info.get('tp2_hit', False):
                         logger.info(f"‚úÖ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP2 ({tp2:.8f}). –í—Ö–æ–¥: {entry_price:.8f}")
                         active_trades[symbol]['tp2_hit'] = True
                         event_logged = True
                if not event_logged and current_low <= tp1:
                    if not trade_info.get('tp1_hit', False) and not trade_info.get('tp2_hit', False):
                         logger.info(f"‚úÖ [{symbol}] –î–û–°–¢–ò–ì–ù–£–¢ TP1 ({tp1:.8f}). –í—Ö–æ–¥: {entry_price:.8f}")
                         active_trades[symbol]['tp1_hit'] = True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è {symbol}: {e}")

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ ---
    for symbol in trades_to_remove:
        active_trades.pop(symbol, None)
        
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    if trades_to_remove:
        save_bot_state()
        logger.info(f"-> –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(active_trades)}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
def load_config(config_path='config.json'):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {config_path}: {e}")
        raise

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    logger.info("--- –ó–∞–ø—É—Å–∫ Monitoring Bot ---")
    
    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    load_bot_state()
    
    # --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    try:
        config = load_config()
        symbols = config['symbols']
        timeframe = config['timeframe']
        monitoring_interval = config.get('monitoring_interval_seconds', 60)
        filter_threshold = config.get('filter_threshold', 0.5)
        exchange_config = config.get('exchange', {})
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω. –°–∏–º–≤–æ–ª–æ–≤: {len(symbols)}, –ò–Ω—Ç–µ—Ä–≤–∞–ª: {monitoring_interval}—Å, –ü–æ—Ä–æ–≥: {filter_threshold}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
        return

    # --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ ---
    try:
        exchange = ccxt.binance({
            'rateLimit': exchange_config.get('rateLimit', 1200),
            'enableRateLimit': exchange_config.get('enableRateLimit', True),
            'options': exchange_config.get('options', {
                'defaultType': 'future',
                'adjustForTimeDifference': True,
            }),
        })
        logger.info(f"–ë–∏—Ä–∂–∞ {exchange.id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂–∏: {e}")
        return

    # --- 3. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
    try:
        model, features = load_latest_model()
        logger.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)}")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return

    logger.info("--- –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---")
    while True:
        cycle_start_time = time.time()
        logger.info(f">>> –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {datetime.now(timezone.utc).isoformat()}")
        
        # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ ---
        try:
            check_active_trades(exchange, timeframe)
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {e}")

        # --- 2. –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ---
        for symbol in symbols:
            if symbol in active_trades:
                continue

            try:
                data_for_prediction = prepare_data_for_prediction(
                    exchange, symbol, timeframe, limit=1, history_limit_for_features=200
                )
                
                if data_for_prediction.empty:
                    continue

                missing_features = [f for f in features if f not in data_for_prediction.columns]
                if missing_features:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ {missing_features[:5]}...")
                    continue

                timestamp = data_for_prediction['timestamp'].iloc[0]
                X_new = data_for_prediction[features].copy()

                # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
                if hasattr(model, 'predict_proba'):
                    prob = model.predict_proba(X_new)[0, 1]
                else:
                    try:
                        import numpy as np
                        predictions_proba = []
                        for name, m in model.items():
                            if hasattr(m, 'predict_proba'):
                                p = m.predict_proba(X_new)[:, 1]
                                predictions_proba.append(p)
                        if predictions_proba:
                             prob = np.mean(predictions_proba, axis=0)[0]
                        else:
                            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω {symbol}: –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –≤ –∞–Ω—Å–∞–º–±–ª–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.")
                            continue
                    except Exception as e:
                         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–Ω—Å–∞–º–±–ª–µ–º –¥–ª—è {symbol}: {e}")
                         continue
                
                signal_status = "‚úÖ –°–ò–ì–ù–ê–õ" if prob > filter_threshold else "‚ùå –ù–ï–¢ –°–ò–ì–ù–ê–õ–ê"
                logger.info(f"{symbol} ({timestamp}) ‚ñ∂ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = {prob:.4f} (–ü–æ—Ä–æ–≥={filter_threshold:.4f}) {signal_status}")

                # --- –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω ---
                if prob > filter_threshold:
                    df_with_indicators_raw = prepare_data_for_prediction(
                        exchange, symbol, timeframe, limit=1, history_limit_for_features=50
                    ).set_index('timestamp')
                    
                    if not df_with_indicators_raw.empty:
                        side = 'LONG' # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º LONG –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É
                        tp1, tp2, tp3, sl = calculate_dynamic_tp_sl(df_with_indicators_raw, side, sl_coef=2.0, tp_window=10)
                        if tp1 is not None and tp2 is not None and tp3 is not None and sl is not None:
                            logger.info(f"üìà –°–∏–≥–Ω–∞–ª LONG –¥–ª—è {symbol}!")
                            logger.info(f"   –í—Ö–æ–¥: ~{df_with_indicators_raw['close'].iloc[-1]:.8f}")
                            logger.info(f"   TP1: {tp1:.8f}")
                            logger.info(f"   TP2: {tp2:.8f}")
                            logger.info(f"   TP3: {tp3:.8f}")
                            logger.info(f"   SL: {sl:.8f}")
                            
                            # --- –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ) ---
                            entry_price = df_with_indicators_raw['close'].iloc[-1]
                            active_trades[symbol] = {
                                'side': side,
                                'entry_price': entry_price,
                                'tp1': tp1,
                                'tp2': tp2,
                                'tp3': tp3,
                                'sl': sl,
                                'entry_time': datetime.now(timezone.utc).isoformat(),
                                'tp1_hit': False,
                                'tp2_hit': False
                            }
                            logger.warning(f"üö® [{symbol}] –°–î–ï–õ–ö–ê –û–¢–ö–†–´–¢–ê –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
                            save_bot_state()
                        else:
                            logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL.")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
        
        # --- 3. –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ ---
        cycle_elapsed = time.time() - cycle_start_time
        sleep_time = max(monitoring_interval - cycle_elapsed, 0)
        logger.info(f"<<< –ò—Ç–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {cycle_elapsed:.2f}—Å. –û–∂–∏–¥–∞–Ω–∏–µ {sleep_time:.2f}—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
        if sleep_time > 0:
            time.sleep(sleep_time)

if __name__ == '__main__':
    # –õ–æ–≥–≥–µ—Ä —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ utils/logger.py
    main()