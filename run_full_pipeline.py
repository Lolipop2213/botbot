# run_full_pipeline.py
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
"""
import subprocess
import sys
import os
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
from utils.logger import pipeline_logger as logger

def run_script(script_name):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    logger.info(f"{datetime.now().strftime('%H:%M:%S')} ‚Üí –ó–∞–ø—É—Å–∫ {script_name}")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.executable –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        result = subprocess.run([sys.executable, script_name], check=True, capture_output=True, text=True)
        logger.info(f"‚úì {script_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        # –õ–æ–≥–∏—Ä—É–µ–º stdout —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG
        if result.stdout.strip():
            logger.debug(f"–í—ã–≤–æ–¥ {script_name}:\n{result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –≤ {script_name}: –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ {e.returncode}")
        if e.stdout:
            logger.error(f"STDOUT:\n{e.stdout}")
        if e.stderr:
            logger.error(f"STDERR:\n{e.stderr}")
        return False
    except Exception as e:
        logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")
        return False

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ Super Trading Bot")
    logger.info("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    pipeline_steps = [
        "data/generate_enhanced_history.py",              # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        "data_generation/generate_ideal_labels.py",       # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
        "data_generation/label_trades.py",                # 3. –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
        "data/create_enhanced_training_dataset.py",       # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        "models/train_ensemble_model.py",                 # 5. –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π
        # "monitoring_bot.py"                             # 6. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
    for step in pipeline_steps:
        if not os.path.exists(step):
            logger.error(f"‚úó –§–∞–π–ª {step} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫.")
            continue
            
        success = run_script(step)
        if not success:
            logger.critical("‚ùå –ü–∞–π–ø–ª–∞–π–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
            sys.exit(1)
        logger.info("-" * 30)
        
    logger.info(f"\n‚úÖ {datetime.now().strftime('%H:%M:%S')} –í–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()